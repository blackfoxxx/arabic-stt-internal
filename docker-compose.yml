version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: arabic-stt-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-arabic_stt}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-arabic_stt}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - arabic-stt-network

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    container_name: arabic-stt-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    networks:
      - arabic-stt-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: arabic-stt-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - arabic-stt-network

  # FastAPI Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: arabic-stt-api
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-arabic_stt}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      
      # MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_SECURE: false
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # Application
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
      
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # External Services
      HUGGINGFACE_TOKEN: ${HUGGINGFACE_TOKEN}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - ./api:/app
      - models_cache:/app/models
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - arabic-stt-network

  # Celery Worker
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: arabic-stt-worker
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-arabic_stt}
      
      # Redis
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      
      # MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_SECURE: false
      
      # ML Models
      HF_HOME: /app/models
      TRANSFORMERS_CACHE: /app/models
      HUGGINGFACE_TOKEN: ${HUGGINGFACE_TOKEN}
      
      # Processing
      MAX_CONCURRENT_JOBS: ${MAX_CONCURRENT_JOBS:-2}
      DEFAULT_ASR_MODEL: ${DEFAULT_ASR_MODEL:-large-v3}
      GPU_ENABLED: ${GPU_ENABLED:-false}
      
      # Audio Processing
      FFMPEG_THREADS: ${FFMPEG_THREADS:-4}
      RNNOISE_ENABLED: ${RNNOISE_ENABLED:-true}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - ./worker:/app
      - models_cache:/app/models
      - temp_processing:/tmp/processing
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      api:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.celery_app inspect ping"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - arabic-stt-network

  # Next.js Frontend (Development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: arabic-stt-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:${API_PORT:-8000}/v1
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./package.json:/app/package.json
      - ./next.config.ts:/app/next.config.ts
      - ./tailwind.config.ts:/app/tailwind.config.ts
      - ./tsconfig.json:/app/tsconfig.json
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - arabic-stt-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: arabic-stt-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./infra/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    depends_on:
      - api
      - worker
    networks:
      - arabic-stt-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: arabic-stt-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - arabic-stt-network

  # Celery Flower for monitoring
  flower:
    image: mher/flower:0.9.7
    container_name: arabic-stt-flower
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      FLOWER_PORT: 5555
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - arabic-stt-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  models_cache:
    driver: local
  temp_processing:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  arabic-stt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16