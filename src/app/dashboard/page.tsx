"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

import { Alert, AlertDescription } from '@/components/ui/alert';

interface DashboardStats {
  totalFiles: number;
  totalMinutes: number;
  completedJobs: number;
  pendingJobs: number;
  monthlyUsage: number;
  monthlyLimit: number;
}

interface RecentJob {
  id: string;
  filename: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  progress: number;
  duration: number;
  createdAt: string;
}

interface User {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  organization?: string;
  plan?: string;
}

export default function DashboardPage() {
  const [user, setUser] = useState<User | null>(null);
  const [stats, setStats] = useState<DashboardStats>({
    totalFiles: 0,
    totalMinutes: 0,
    completedJobs: 0,
    pendingJobs: 0,
    monthlyUsage: 45,
    monthlyLimit: 60
  });
  const [recentJobs, setRecentJobs] = useState<RecentJob[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  // Dashboard action handlers
  const handleViewJob = (jobId: string) => {
    console.log('👀 Viewing job:', jobId);
    // Navigate to transcript viewer
    window.location.href = `/transcripts/transcript_${jobId}`;
  };

  const handleDownloadJob = (jobId: string, filename: string) => {
    console.log('💾 Downloading job:', jobId, filename);
    // Simulate download
    const downloadData = `Arabic STT Transcript for ${filename}\n\nGenerated by Arabic STT SaaS Platform\nJob ID: ${jobId}\n\nTranscript content would appear here...`;
    const blob = new Blob([downloadData], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `transcript_${filename.replace(/\.[^/.]+$/, '')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleCancelJob = (jobId: string) => {
    console.log('❌ Cancelling job:', jobId);
    // Update job status
    setRecentJobs(prev => prev.map(job => 
      job.id === jobId ? { ...job, status: 'failed', progress: 0 } : job
    ));
    alert('تم إلغاء المهمة بنجاح');
  };

  const handleLogout = () => {
    console.log('🚪 Logging out user');
    // Clear any stored tokens
    if (typeof window !== 'undefined') {
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
    }
    // Redirect to homepage
    window.location.href = '/';
  };

  const handleUpgradePlan = () => {
    console.log('⬆️ Upgrade plan requested');
    alert('ميزة ترقية الخطة ستكون متاحة قريباً! 🚀');
  };

  const handleViewStats = () => {
    console.log('📊 View detailed statistics');
    alert('صفحة الإحصائيات التفصيلية قيد التطوير! 📈');
  };

  const handleAccountSettings = () => {
    console.log('⚙️ Account settings requested');
    alert('إعدادات الحساب ستكون متاحة قريباً! ⚙️');
  };

  const handleUserGuide = () => {
    console.log('📖 User guide requested');
    window.location.href = '/help';
  };

  const handleRefreshData = async () => {
    console.log('🔄 Refreshing dashboard data...');
    setIsLoading(true);
    
    try {
      const response = await fetch('/api/dashboard-stats');
      const data = await response.json();
      
      if (data.success) {
        setStats(data.stats);
        setUser(data.user);
        setRecentJobs(data.recentJobs);
        console.log('✅ Dashboard data refreshed:', { 
          totalFiles: data.stats.totalFiles,
          totalMinutes: data.stats.totalMinutes,
          completedJobs: data.stats.completedJobs,
          recentJobs: data.recentJobs.length 
        });
      }
    } catch (error) {
      console.error('❌ Failed to refresh dashboard data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    // Load real data from API
    console.log('📊 Loading dashboard data from API...');
    
    const loadDashboardData = async () => {
      try {
        const response = await fetch('/api/dashboard-stats');
        const data = await response.json();
        
        if (data.success) {
          setStats(data.stats);
          setUser(data.user);
          setRecentJobs(data.recentJobs);
          console.log('✅ Real dashboard data loaded:', { 
            totalFiles: data.stats.totalFiles,
            totalMinutes: data.stats.totalMinutes,
            completedJobs: data.stats.completedJobs,
            recentJobs: data.recentJobs.length 
          });
        } else {
          console.warn('⚠️ Dashboard API returned error, using fallback data');
          // Fallback to demo data if API fails
          loadFallbackData();
        }
      } catch (error) {
        console.error('❌ Failed to load dashboard data:', error);
        // Load demo data as fallback
        loadFallbackData();
      } finally {
        setIsLoading(false);
      }
    };

    const loadFallbackData = () => {
      const internalUser = {
        id: 'internal-admin',
        name: 'مدير النظام',
        email: 'admin@company.com', 
        organization: 'النظام الداخلي',
        plan: 'نظام داخلي'
      };

      const internalJobs = [
        {
          id: '1',
          filename: 'اجتماع_الإدارة_2024.mp3',
          status: 'completed' as const,
          progress: 100,
          duration: 1845,
          createdAt: '2024-01-15T10:30:00Z'
        },
        {
          id: '2', 
          filename: 'تدريب_الموظفين.mp4',
          status: 'processing' as const,
          progress: 75,
          duration: 3420,
          createdAt: '2024-01-15T09:15:00Z'
        }
      ];

      setStats({
        totalFiles: 2,
        totalMinutes: 85,
        completedJobs: 1,
        pendingJobs: 1,
        monthlyUsage: 0,
        monthlyLimit: 0
      });

      setUser(internalUser);
      setRecentJobs(internalJobs);
      console.log('✅ Fallback dashboard data loaded');
    };

    loadDashboardData();

    // Simulate real-time job updates for processing jobs
    const updateProcessingJobs = () => {
      setRecentJobs(prev => prev.map(job => {
        if (job.status === 'processing' && job.progress < 100) {
          const newProgress = Math.min(100, job.progress + Math.random() * 10);
          const isCompleted = newProgress >= 100;
          
          return {
            ...job,
            progress: Math.round(newProgress),
            status: isCompleted ? 'completed' : 'processing'
          };
        }
        return job;
      }));
    };

    // Update processing jobs every 3 seconds
    const interval = setInterval(updateProcessingJobs, 3000);
    
    // Cleanup interval on unmount
    return () => clearInterval(interval);
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'processing': return 'bg-blue-100 text-blue-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'failed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed': return 'مكتمل';
      case 'processing': return 'قيد المعالجة';
      case 'pending': return 'في الانتظار';
      case 'failed': return 'فشل';
      default: return 'غير معروف';
    }
  };

  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ar-SA', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">جاري تحميل لوحة التحكم...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4 space-x-reverse">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-indigo-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-xl">ع</span>
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">لوحة التحكم</h1>
                <p className="text-sm text-gray-600">مرحباً، {user?.name}</p>
              </div>
            </div>

            <div className="flex items-center space-x-4 space-x-reverse">
              <Button 
                variant="outline" 
                onClick={handleRefreshData}
                disabled={isLoading}
                className="flex items-center gap-2"
              >
                <span className={isLoading ? "animate-spin" : ""}>🔄</span>
                تحديث البيانات
              </Button>
              <Button variant="outline" onClick={handleViewStats}>
                📊 إحصائيات تفصيلية
              </Button>
              <Button variant="outline" onClick={handleAccountSettings}>
                ⚙️ الإعدادات
              </Button>
              <Button variant="outline" onClick={handleLogout}>
                🚪 تسجيل الخروج
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {/* System Status */}
        <Alert className="mb-6">
          <AlertDescription>
            <div className="flex items-center justify-between">
              <span>حالة النظام: متصل ويعمل بكفاءة عالية</span>
              <Badge className="bg-green-100 text-green-800">نشط</Badge>
            </div>
            <div className="mt-2 text-sm text-gray-600">
              النظام جاهز لمعالجة الملفات الصوتية بلا حدود • آخر تحديث: اليوم
            </div>
          </AlertDescription>
        </Alert>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">إجمالي الملفات</CardTitle>
              <span className="text-2xl">📄</span>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.totalFiles}</div>
              <p className="text-xs text-muted-foreground">ملف محمل</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">دقائق المعالجة</CardTitle>
              <span className="text-2xl">⏱️</span>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.totalMinutes}</div>
              <p className="text-xs text-muted-foreground">دقيقة معالجة</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">المهام المكتملة</CardTitle>
              <span className="text-2xl">✅</span>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.completedJobs}</div>
              <p className="text-xs text-muted-foreground">مهمة مكتملة</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">المهام الجارية</CardTitle>
              <span className="text-2xl">🔄</span>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.pendingJobs}</div>
              <p className="text-xs text-muted-foreground">مهمة جارية</p>
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Upload Area */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>رفع ملف جديد</CardTitle>
                <CardDescription>
                  ارفع ملفاً صوتياً أو مرئياً للصول على نسخة نصية
                </CardDescription>
              </CardHeader>
              <CardContent>
                 <div 
                  className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors cursor-pointer"
                  onClick={() => window.location.href = '/upload'}
                >
                  <div className="mb-4">
                    <span className="text-4xl">📁</span>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    اسحب الملفات هنا أو انقر للتصفح
                  </h3>
                  <p className="text-sm text-gray-600 mb-4">
                    يدعم: MP3, WAV, MP4, AVI (حد أقصى 100 ميجابايت للتجربة)
                  </p>
                  <Button onClick={(e) => {
                    e.stopPropagation();
                    window.location.href = '/upload';
                  }}>
                    اختيار ملفات
                  </Button>
                </div>

                {/* Demo Notice */}
                <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2">نسخة تجريبية</h4>
                  <p className="text-sm text-blue-700">
                    لتفعيل رفع الملفات والمعالجة الكاملة، يجب تشغيل الخدمات الخلفية:
                  </p>
                  <code className="block bg-blue-100 px-3 py-2 rounded mt-2 text-xs text-blue-800">
                    ./start-full-stack.sh
                  </code>
                </div>
              </CardContent>
            </Card>

            {/* Recent Jobs */}
            <Card className="mt-6">
              <CardHeader>
                <CardTitle>المهام الأخيرة</CardTitle>
                <CardDescription>
                  آخر ملفات التفريغ التي تم معالجتها
                </CardDescription>
              </CardHeader>
              <CardContent>
                {recentJobs.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    <span className="text-3xl block mb-2">📭</span>
                    <p>لا توجد مهام حتى الآن</p>
                    <p className="text-sm">ابدأ برفع أول ملف صوتي</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {recentJobs.map((job) => (
                      <div key={job.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 space-x-reverse mb-2">
                            <h4 className="font-medium text-gray-900">{job.filename}</h4>
                            <Badge className={getStatusColor(job.status)}>
                              {getStatusText(job.status)}
                            </Badge>
                          </div>
                          <div className="flex items-center space-x-4 space-x-reverse text-sm text-gray-600">
                            <span>المدة: {formatDuration(job.duration)}</span>
                            <span>التاريخ: {formatDate(job.createdAt)}</span>
                          </div>
                          {job.status === 'processing' && (
                            <div className="mt-2">
                              <Progress value={job.progress} className="h-2" />
                              <p className="text-xs text-gray-500 mt-1">
                                التقدم: {job.progress}%
                              </p>
                            </div>
                          )}
                        </div>
                        <div className="flex items-center space-x-2 space-x-reverse">
                           {job.status === 'completed' && (
                            <>
                              <Button 
                                size="sm" 
                                variant="outline"
                                onClick={() => handleViewJob(job.id)}
                              >
                                عرض
                              </Button>
                              <Button 
                                size="sm" 
                                variant="outline"
                                onClick={() => handleDownloadJob(job.id, job.filename)}
                              >
                                تحميل
                              </Button>
                            </>
                          )}
                          {job.status === 'processing' && (
                            <Button 
                              size="sm" 
                              variant="outline"
                              onClick={() => handleCancelJob(job.id)}
                            >
                              إلغاء
                            </Button>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div>
            {/* Quick Actions */}
            <Card className="mb-6">
              <CardHeader>
                <CardTitle>إجراءات سريعة</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                 <Button className="w-full" size="sm" asChild>
                  <Link href="/upload">📤 رفع ملف جديد</Link>
                </Button>
                <Button 
                  className="w-full" 
                  variant="outline" 
                  size="sm"
                  onClick={handleViewStats}
                >
                  📊 عرض الإحصائيات
                </Button>
                <Button 
                  className="w-full" 
                  variant="outline" 
                  size="sm"
                  onClick={handleAccountSettings}
                >
                  ⚙️ إعدادات الحساب
                </Button>
                <Button 
                  className="w-full" 
                  variant="outline" 
                  size="sm"
                  onClick={handleUserGuide}
                >
                  📖 دليل الاستخدام
                </Button>
              </CardContent>
            </Card>

            {/* Subscription Info */}
            <Card className="mb-6">
              <CardHeader>
                <CardTitle>خطة الاشتراك</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600 mb-2">
                    {user?.plan}
                  </div>
                  <p className="text-sm text-gray-600 mb-4">
                    {stats.monthlyLimit} دقيقة شهرياً
                  </p>
                  <Progress 
                    value={(stats.monthlyUsage / stats.monthlyLimit) * 100} 
                    className="mb-4" 
                  />
                  <p className="text-xs text-gray-500 mb-4">
                    المتبقي: {stats.monthlyLimit - stats.monthlyUsage} دقيقة
                  </p>
                   <Button 
                    size="sm" 
                    className="w-full"
                    onClick={handleUpgradePlan}
                  >
                    ترقية الخطة
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Support */}
            <Card>
              <CardHeader>
                <CardTitle>الدعم والمساعدة</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                 <button 
                  onClick={() => window.location.href = '/help'}
                  className="block w-full p-3 rounded-lg border hover:bg-gray-50 transition-colors text-right"
                >
                  <div className="flex items-center space-x-3 space-x-reverse">
                    <span className="text-xl">❓</span>
                    <div>
                      <h4 className="font-medium text-sm">الأسئلة الشائعة</h4>
                      <p className="text-xs text-gray-600">إجابات سريعة للأسئلة الشائعة</p>
                    </div>
                  </div>
                </button>
                
                <button 
                  onClick={() => window.location.href = '/docs'}
                  className="block w-full p-3 rounded-lg border hover:bg-gray-50 transition-colors text-right"
                >
                  <div className="flex items-center space-x-3 space-x-reverse">
                    <span className="text-xl">📚</span>
                    <div>
                      <h4 className="font-medium text-sm">التوثيق</h4>
                      <p className="text-xs text-gray-600">دليل استخدام المنصة</p>
                    </div>
                  </div>
                </button>
                
                <button 
                  onClick={() => window.location.href = '/contact'}
                  className="block w-full p-3 rounded-lg border hover:bg-gray-50 transition-colors text-right"
                >
                  <div className="flex items-center space-x-3 space-x-reverse">
                    <span className="text-xl">💬</span>
                    <div>
                      <h4 className="font-medium text-sm">تواصل معنا</h4>
                      <p className="text-xs text-gray-600">احصل على مساعدة مباشرة</p>
                    </div>
                  </div>
                </button>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Backend Status Notice */}
        <div className="mt-8">
          <Card className="border-blue-200 bg-blue-50">
            <CardHeader>
              <CardTitle className="text-blue-900">حالة النظام</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-blue-800">الواجهة الأمامية</span>
                  <Badge className="bg-green-100 text-green-800">متصل</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-blue-800">خدمة API</span>
                  <Badge className="bg-yellow-100 text-yellow-800">في الانتظار</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-blue-800">معالج التفريغ</span>
                  <Badge className="bg-yellow-100 text-yellow-800">في الانتظار</Badge>
                </div>
                
                <div className="mt-4 p-3 bg-blue-100 rounded">
                  <p className="text-sm text-blue-800 mb-2">
                    لتفعيل جميع الخدمات والبدء في التفريغ الفعلي:
                  </p>
                  <code className="block bg-white px-2 py-1 rounded text-xs text-blue-900">
                    ./start-full-stack.sh
                  </code>
                  <p className="text-xs text-blue-600 mt-2">
                    سيؤدي هذا إلى تشغيل قاعدة البيانات، وخدمة API، ومعالج التفريغ
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}